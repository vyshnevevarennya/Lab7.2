#include <iostream>
#include <iomanip>
#include <ctime> 

using namespace std;


void Create(int** t, const int n, const int Low, const int High, int i, int j)
{
    
    t[i][j] = Low + rand() % (High - Low + 1);

    // Переходимо до наступного стовпця
    if (j < n - 1)
        Create(t, n, Low, High, i, j + 1); // Рекурсивно створюємо наступний елемент у рядку
    else
        // Переходимо на наступний рядок, якщо стовпці закінчилися
        if (i < n - 1)
            Create(t, n, Low, High, i + 1, 0); // Починаємо з першого стовпця наступного рядка
}


void Print(int** t, const int n, int i, int j)
{
    // Виведення елемента з вирівнюванням по ширині 4 символи
    cout << setw(4) << t[i][j];

   
    if (j < n - 1)
        Print(t, n, i, j + 1); 
    else
        if (i < n - 1)
        {
            cout << endl; 
            Print(t, n, i + 1, 0); 
        }
        else
            cout << endl << endl; 
}


void Transpose(int** t, const int n, int i, int j)
{
    
    int tmp = t[i][j];
    t[i][j] = t[j][i];
    t[j][i] = tmp;

   
    if (j < i - 1)
        Transpose(t, n, i, j + 1); 
    else
        
        if (i < n - 1)
            Transpose(t, n, i + 1, 0); // Починаємо з першого елемента наступного рядка
}


int main()
{
   
    srand((unsigned)time(NULL));

    int Low = -15; 
    int High = 15; 

    int n; // Розмір матриці
    cout << "n = ";
    cin >> n; // Введення розміру матриці

    // Створення динамічного квадратного масиву (матриці)
    int** t = new int* [n];
    for (int i = 0; i < n; i++)
        t[i] = new int[n];

    // Створення матриці
    Create(t, n, Low, High, 0, 0);
    cout << endl;

   
    Print(t, n, 0, 0);

   
    Transpose(t, n, 0, 0);

    
    Print(t, n, 0, 0);

   
    for (int i = 0; i < n; i++)
        delete[] t[i]; // Звільняємо пам'ять для кожного рядка
    delete[] t; // Звільняємо пам'ять для масиву рядків

    return 0; // Завершення програми
}
